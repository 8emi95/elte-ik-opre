5. (10 pont) ´Irjon programot csebrek.m n´even, mely a rekurzi´os k´eplet alapj´an el˝o´all´ıtja
a Csebisev polinomokat a Matlab-os polinom-vektor alakj´aban.
• Bemen˝o param´eter: n: foksz´am
• Kimen˝o param´eter: p: az egy¨utthat´okat tartalmaz´o vektor.
• Vizsg´alja n ´ert´ek´et, hogy term´eszetes sz´am-e.
• n=0,1-re is m˝uk¨odj¨on j´ol.
• K´esz´ıtsen teszt file-t a f¨uggv´eny n=4, n=6-tal val´o h´ıv´as´ara ´es ´ırja a feladatlapra
a kapott polinomokat (nem vektork´ent)!
Bek¨uldend˝o a csebrek.m ´es a teszt f´ajl.

function [ p ] = csebrek( n )
%csebrek    Előállítja az n-ed fokú Csebisev polinomot a rekurziós képlet
%           alapján
%   Bemenő paraméter:
%       n : fokszám
%   Kimeno paraméter:
%       p : az együtthatókat tartalmazó vektor

if floor(n) == n & n >= 0  ,
    if n == 0,
        p = [1];
    else 
        pnm1 = [ 1 ];
        p = [ 1 0 ];
        for i = 2:n,
            pnp1 = 2 * [ p,0 ] - [0,0,pnm1];
            pnm1 = p;
            p = pnp1;
        end
    end
else
    disp 'A megadott fokszám nem természetes szám!'
end
end


4. (14 pont) ´Irjon szkriptet spl3t.m n´even, mely a 2. feladatban megadott harmadfok´u
term´eszetes interpol´aci´os spline-t elk´esz´ıti. A fel´ırt LER-t oldja meg a Matlab
seg´ıts´eg´evel. K´esz´ıtsen k´et rajzot egym´as al´a,
• az els˝on a spline ´es a f¨uggv´eny szerepeljen,
• jel¨olje meg, melyik-melyik ´es adjon c´ımet a rajznak.
• A m´asodikon a hibaf¨uggv´enyt jelen´ıtse meg c´ımmel.
•
´Irja ki a hib´at!
Bek¨uldend˝o az spl3t.m f´ajl.

A = [-8, 4, -2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    -1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, -1, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1;
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 2, 1;
    
    3, -2, 1, 0, -3, 2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0, -3, -2, -1, 0;
    
    -6, 2, 0, 0, 6, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0;
    0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, -6, -2, 0, 0;
    
    12, -4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -4, -1, 0;
    -12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, -2, 0, 0
    ];
    
b = [0, -1, -1, 2, 2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0]';
    
c = A\b;

s1 = flipud(c(1:4)'); % egyenletek
s2 = flipud(c(5:8)');
s3 = flipud(c(9:12)');
s4 = flipud(c(13:16)');

xx1 = linspace(-2, -1, 51);
xx2 = linspace(-1, 0, 51);
xx2 = xx2(2:50); % Kivesszük az első elemet, mert ismétlődik (előző intervallum vége)
xx3 = linspace(0, 1, 51);
xx3 = xx3(2:50);
xx4 = linspace(1, 2, 51);
xx4 = xx4(2:51);
xx = [xx1, xx2, xx3, xx4]; % értelemzési tartomány, összesen 50 * 4 + 1 = 201 pont

pp1 = polyval(s1, xx1); %% interpolációs spline értékek
pp2 = polyval(s2, xx2);
pp3 = polyval(s3, xx3);
pp4 = polyval(s4, xx4);
yy = cos(pi/2 * xx) + cos(pi * xx); % függvényértékek

pp = [pp1, pp2, pp3, pp4];
hh = abs(yy - pp);
hiba = max(hh);

subplot(2, 1, 1);
plot(xx1, pp1, 'r', xx2, pp2, 'r', xx3, pp3, 'r', xx4, pp4, 'r', xx, yy, 'g');
legend('spline1', 'spline2', 'spline3', 'spline4', 'fgv');

subplot(2, 1, 2);
plot(xx, hh);
legend('hibafgv.');
% disp('Hiba = ' + hiba);
hiba




másik


function [  ] = spl3p(  )

A = [1 -2  4 -8 0 0 0;
     1 -1 1 -1 0 0 0;
     1 0 0 0 1 0 0;
     1 1 1 1 8 1 0;
     1 2 4 8 27 8 1;
     0 0 8 0 27 12 3;
     0 0 0 24 18 12 6];
b = [0;-1;2;-1;0;0;0];
x = A\b

xx = linspace(-2, 2, 101);
aa = zeros(1, 101);
bb = zeros(1, 101);
cc = zeros(1, 101);
coef = flipud(x(1:4));
aa(26:101) = ((xx(26:101) + 1) .^ 3) * x(5);
bb(51:101) = (xx(51:101) .^ 3) * x(6);
cc(76:101) = ((xx(76:101) - 1) .^3) * x(7 );

func = polyval(coef, xx) + aa + bb + cc;

real_func = cos(pi/2 * xx) + cos(pi * xx);

error = abs(func - real_func);
disp('A hiba: ');
max_err = max(error)

subplot(2, 1, 1);

plot(xx, func, xx, real_func);
title('The spline and the interpolated function');
legend('Spline', 'Real function');

subplot(2, 1, 2);

plot (xx, error);
title('The error function');

end


function[gyok1, gyok2] = gyokelvalaszt( n )
%Csebisev gyökeit kiírató fg.
if n == round(n)
    k=0:(n-1);
    gyok1 = pi * (2*k+1) ./ (2*n);

    k=0:n;
    gyok2 = pi*(2*k+1) ./ (2*(n+1));

    plot(gyok1, zeros(1,n), '.', gyok2, zeros(1,n+1), '.');
    legend('Tn', 'Tn+1');
else
    disp('Nem jo')
end;

%gyokelvalaszt( 6 )