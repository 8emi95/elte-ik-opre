--IF UTASÍTÁS
/*  SET SERVEROUTPUT ON
  DECLARE
    a number(3) := 100;
  BEGIN
    IF ( a = 10 ) THEN
      dbms_output.put_line('Value of a is 10' );
    ELSIF ( a = 20 ) THEN
      dbms_output.put_line('Value of a is 20' );
    ELSIF ( a = 30 ) THEN
      dbms_output.put_line('Value of a is 30' );
    ELSE
      dbms_output.put_line('None of the values is matching');
    END IF;
      dbms_output.put_line('Exact value of a is: '|| a );
  END;
  /*/
  
--CASE UTASÍTÁS
  /*SET SERVEROUTPUT ON
  DECLARE
    grade char(1) := 'A';
  BEGIN
    CASE grade
      when 'A' then dbms_output.put_line('Excellent');
      when 'B' then dbms_output.put_line('Very good');
      when 'C' then dbms_output.put_line('Well done');
      when 'D' then dbms_output.put_line('You passed');
      when 'F' then dbms_output.put_line('Better try
      again');
     else dbms_output.put_line('No such grade');
    END CASE;
  END;
  /*/

--VÉGTELEN LOOP 
  /*SET SERVEROUTPUT ON
  DECLARE
    x number := 10;
  BEGIN
  LOOP
    dbms_output.put_line(x);
    x := x + 10;
    IF x > 50 THEN
      exit; -- itt lep majd ki
    END IF;
    END LOOP;
    dbms_output.put_line('After Exit x is: ' || x);
  END;
  /*/
  
--WHILE UTASÍTÁS
  /*SET SERVEROUTPUT ON
  DECLARE
    a number(2) := 10;
  BEGIN
  WHILE a < 20 LOOP
    dbms_output.put_line('value of a: ' || a);
    a := a + 1;
  END LOOP;
  END;
  /*/
  
--FOR UTASÍTÁS
  /*SET SERVEROUTPUT ON
  DECLARE
    a number(2);
  BEGIN
    FOR a in 10 .. 20 LOOP
    dbms_output.put_line('value of a: ' || a);
    END LOOP;
  END;
  /*/

--KING DOLGOZÓ ADATAINAK TÁROLÁSA
  /*SET SERVEROUTPUT ON
  DECLARE
    dolg dolgozo%ROWTYPE;
  BEGIN
    SELECT *
    INTO dolg 
    FROM dolgozo 
    WHERE dnev='KING';
    dbms_output.put_line('value of KING: ' || dolg.dnev || dolg.fizetes);
  END;
  /*/

--ADATOK MANIPULÁLÁSA
  /*DECLARE
    emp_id employees.employee_id%TYPE := 299;
    emp_first_name employees.first_name%TYPE := 'Bob';
    emp_last_name employees.last_name%TYPE := 'Henry';
  BEGIN
    INSERT INTO employees (employee_id, first_name, last_name)
    VALUES (emp_id, emp_first_name, emp_last_name);
   
    UPDATE employees
    SET first_name = 'Robert'
    WHERE employee_id = emp_id;
    
    DELETE FROM employees
    WHERE employee_id = emp_id
    RETURNING first_name, last_name
    INTO emp_first_name, emp_last_name;
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE (emp_first_name || ' ' || emp_last_name);
  END;
  /*/
  
--ADATOK MANIPULÁLÁSA 2
  /* SET SERVEROUTPUT ON;
  DROP TABLE emp_temp;
  CREATE TABLE emp_temp AS
    SELECT * FROM employees;
  DECLARE
    mno NUMBER(6) := 122;
  BEGIN
    DELETE FROM emp_temp WHERE manager_id = mno;
    DBMS_OUTPUT.PUT_LINE ('Number of employees deleted: ' || TO_CHAR(SQL%ROWCOUNT));
  END;
  /*/

--MINDEN DOLGOZO KODJA + NEVE IMPLICIT KURZORRAL
  /*SET SERVEROUTPUT ON
  BEGIN
    FOR cikl IN (SELECT * FROM Dolgozo)
    LOOP
      dbms_output.put_line('Kod: ' || cikl.dkod || ', nev: ' || cikl.dnev);
    END LOOP;
  END;
  /*/

--MINDEN DOLGOZO KODJA + NEVE EXPLICIT KURZORRAL
  /*SET SERVEROUTPUT ON
  DECLARE
    CURSOR curs IS SELECT * FROM Dolgozo; --létrehozás
    dolg Dolgozo%ROWTYPE;   --sortípus megadása
  BEGIN
    OPEN curs;    --kurzor megnyitása
    LOOP
      FETCH curs into dolg;   --kurzor változóba olvasása
      EXIT WHEN curs%NOTFOUND;
      dbms_output.put_line('Kod: ' || dolg.dkod || ', nev: ' || dolg.dnev);
    END LOOP;
  END;
  /*/
  
--KURZOR ATTRIBÚTUMOK HASZNÁLATA
  /*SET SERVEROUTPUT ON
  DECLARE
    CURSOR c1 IS
      SELECT last_name FROM employees
      WHERE ROWNUM < 11;
    name employees.last_name%TYPE;
  BEGIN
    OPEN c1;
    LOOP
      FETCH c1 INTO name;
      EXIT WHEN c1%NOTFOUND OR c1%NOTFOUND IS NULL;
      DBMS_OUTPUT.PUT_LINE(c1%ROWCOUNT || '. ' || name);
      IF c1%ROWCOUNT = 5 THEN
        DBMS_OUTPUT.PUT_LINE('--- Fetched 5th record ---');
      END IF;
    END LOOP;
  CLOSE c1;
  END;
  /*/
  
--5000 forint fizetés alatti manager fizetésének beállítása 5000-re
  /*SET SERVEROUTPUT ON;
  DECLARE
    v_curs dolgozo%rowtype; 
    CURSOR curs IS SELECT * FROM Dolgozo for update;
  BEGIN
    OPEN curs;
    LOOP
      FETCH curs INTO v_curs;
      EXIT WHEN curs%NOTFOUND;
      IF v_curs.foglalkozas='MANAGER' AND v_curs.fizetes<5000 THEN
        DBMS_OUTPUT.PUT_LINE('asd');
        UPDATE Dolgozo SET fizetes=5000
        WHERE CURRENT OF curs;
      END IF;
    END LOOP;
    CLOSE curs;
  END;
  /*/

--ELJÁRÁS ÉS FÜGGVÉNY HASZNÁLATA
  /*SET SERVEROUTPUT ON
  DECLARE
    szam NUMBER(2);
    PROCEDURE koszon IS
      BEGIN
        dbms_output.put_line('Hello!'); 
      END koszon;
    function fix_szam RETURN NUMBER is
      BEGIN
        RETURN 10;
      END fix_szam;
  BEGIN
    koszon;
    szam := fix_szam;
    dbms_output.put_line(szam);
  END;
  /*/
  
--PARAMÉTEREK KIPRÓBÁLÁSA - PÉLDA
  /*SET SERVEROUTPUT ON
  DECLARE
    szam1 NUMBER(2) := 1;
    szam2 NUMBER(2);
    szam3 NUMBER(2) := 3;
    PROCEDURE muvelet (inp IN NUMBER, outp OUT NUMBER, inout IN OUT NUMBER) IS
    BEGIN
      dbms_output.put_line('in parameter: ' || inp || ', in out parameter: ' || inout); outp := inp + inout; inout := outp + inp; 
    END muvelet;
  BEGIN
    muvelet(szam1, szam2, szam3);
    dbms_output.put_line('out parameter: ' || szam2 || ', in out parameter: ' || szam3);
  END;
  /*/
  
--KIVÉTELKEZELÉS - PÉLDA
  /*SET SERVEROUTPUT ON
  DECLARE
    kod Dolgozo.dkod%TYPE; 
    nev Dolgozo.dnev%TYPE;
  BEGIN
    SELECT dkod, dnev
    INTO kod, nev
    FROM Dolgozo WHERE dkod=kod;
    dbms_output.put_line(kod); 
    dbms_output.put_line(nev);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      dbms_output.put_line('Nincs ilyen kodu dolgozo');
    WHEN OTHERS THEN
      dbms_output.put_line('Hiba');
  END;
  /*/