Gyak kódok leírása:

*****gy0****************************************************************
arg.c:
	string tömb (char**)
	argumentumok száma (argc)
	argumentumok olvasása (argv[i])

directory.c:
	mappa tartalmának listázása
	38 41	mappa megnyitása (DIR*, opendir("."))
	45		mappa-e az elem? (S_ISDIR)
	12		fájladatok struktúrája (dirent)
	52		struktúra változójának printelése
	54		mappa bezárása

file.c:
	másolat készítése fájlról

mtime.c:
	dátum kiírása ctime()-mal
	fájl adatai (utolsó módosítás dátuma)

open_fopen.c:
	fopen: soronkénti olvasás
	open: bináris olvasás (pozícionálásokkal)
	fopen: bináris olvasás (pozícionálásokkal)

passwd.c:
	fájl tulajdonosának kiírása (név, id)

strings.c:
	string létrehozása (15)
	stringpointer összehasonlítása (26)
	string feltöltése karakterenként, végére 0 betétele! (31)
	string-be új szöveg tétele (strcpy, 34)
	
	strcpy: felülírja a string tartalmát!
	strcat: hozzákonkatenál a string tartalmához!
	malloc: új memória a stringnek!
	free: string memóriájának felszabadítása!

*****gy1****************************************************************
exec.c:
	gyerekfolyamat létrehozása! (fork)
	gyerek végrehajtásának megvárása szülő által! (waitpid)
	gyerekben másik program futtatása! (execv)
	argumentumok megadása: {} közé, végére kell a NULL!
	execv után a gyerekfolyamat további kódja nem fut le!

fcntl.c:
	fájl lezárolása, mert több folyamat is akar írni bele egyszerre! (fcntl)
	mikromásodpercnyi alvás (usleep)
	folyamat saját számának megkapása! (getpid())
		fork() a létrehozott gyerek számát adja meg a szülőfolyamatban (gyerekben 0-t)!
		így több gyerekfolyamat közül lehet azonosítani mindet!

fcntl_0.c:
	fcntl.c több folyamat lock nélkül így ír fájlba!
	
fork.c:
	fork működése!
		másolatot készít a változókról, amit a létrehozott gyerekfolyamat használ!
		ezután a gyerek nem tudja megváltoztatni a szülőben lévő változót (aminek a másolatát megkapta)!
	waitpid(): gyerek lefutásának megvárása!

rand.c:
	véletlenszám generálása!

system.c:
	system() hívás használata!
		gyerekfolyamat futtat egy másik programot, mint az execv!
		viszont a másik program lefutása után folytatódik a gyerekfolyamat, nem úgy mint execv-nél!

*****gy2****************************************************************
setitimer.c:
	SIGALRM jelzés küldése!
		signal(), alarm() (27-28)
	-vagy
		setitimer()-rel!
	timer lejáratának ellenőrzése meghatározott időközönként! (getitimer, 52)
	szignál kezelő függvények! (handleralarm, handlersetitimer)

sigaction.c:
	szülőfolyamat számának lekérése gyerekfolyamatban! (getppid())
	szignál küldése! (kill)
	handler függvény szignálokhoz!
	
	szignálhalmaz feltöltése! (sigfillset, 29)
	szignálhalmazból SIGTERM kitörlése! (sigdelset, 30)
	sigsuspend: azokra a jelzésekre vár, amik nincsenek a szignálhalmazban! (31)

sigaction_multiple.c:
	szülőfolyamat megvárja, amíg a gyerekfolyamat befejezni a jelzések küldését! (wait, 40)

sigaction_value.c

signal.c

sigprocmask.c


