#include <stdlib.h>  
#include <stdio.h>
#include <sys/types.h> //fork-hoz
#include <sys/stat.h>
#include <unistd.h> //fork
#include <string.h> //strlen
#include <fcntl.h> //lock
#include <signal.h>
#include <sys/time.h>
#include <wait.h>

//pipe 4.gyak csatornákhoz...pipeba adat is mehet 5. mynevcso
//signal 4. gyak jelzéshez?
//Ha else-be van a parent akko az indul el előszor??

void rendezveny(char fileNev[]){
	
	int pipefd[2]; // unnamed pipe file descriptor array
	pid_t pid;
	char sz[100];  // char array for reading from pipe

	if (pipe(pipefd) == -1) 
	{
	   perror("Hiba a pipe nyitaskor!");
	   exit(EXIT_FAILURE);
	}
	pid = fork();
	if (pid < 0)
	{
		// error
		return;
	}
	else if (pid == 0) // child process ir fajlba
	{
		/*FILE* handle_write = fopen("output.txt", "w");
		if (handle_write == 0)
		{
			printf("File error.\n");
			return;
		}
		fputs(data, handle_write);
		fclose(handle_write);*/
		
		
		sleep(3);	// sleeping a few seconds, not necessary
		close(pipefd[1]);  //Usually we close the unused write end
		printf("Gyerek elkezdi olvasni a csobol az adatokat!\n");
		read(pipefd[0],sz,sizeof(sz)); // reading max 100 chars
		printf("Gyerek olvasta uzenet: %s",sz);
		printf("\n");
		close(pipefd[0]); // finally we close the used read end
	}
	else // parent olvas, es kiir kepernyore
	{
		/*FILE* handle = fopen(fileNev, "r");
		int status = 0;
		waitpid(child, &status, 0);
		FILE* handle_read = fopen("output.txt", "r");
		if (handle_read == 0)
			{
				printf("File error.\n");
				return;
			}
		char* buffer = malloc(sizeof(char)*(strlen(data)+1));
		fgets(buffer, strlen(data)+1, handle_read);
		printf("%s\n", buffer);
		fclose(handle_read);*/
		
		printf("Szulo indul!\n");
		close(pipefd[0]); //Usually we close unused read end
		write(pipefd[1], "Hajra Fradi!",13);
		close(pipefd[1]); // Closing write descriptor 
		printf("Szulo beirta az adatokat a csobe!\n");
		fflush(NULL); 	// flushes all write buffers (not necessary)
		wait();		// waiting for child process (not necessary)
		// try it without wait()
		printf("Szulo befejezte!");	
	}	
}

int main(){
	FILE* myfile = fopen("rendezvenyek", "r");
	if (myfile == NULL)
	{
		printf("Error opening file!\n");
		return;
	}
	char filenev[30];
	char ch;
	int tmp=0;
	
	ch=getc(myfile);
	while(ch!=EOF){
		while(ch!='\n' && ch!=EOF){
			filenev[tmp]=ch;
			tmp++;
			ch=getc(myfile);
		}
		if(ch=='\n'){
			rendezveny(filenev);
			ch=getc(myfile);
		}
	}
	
	
	fclose(myfile);
	

  return 0;
}