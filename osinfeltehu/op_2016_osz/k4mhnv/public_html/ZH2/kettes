#include <stdlib.h>  
#include <stdio.h>
#include <sys/ipc.h> 
#include <string.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/time.h>
#include <time.h>
#include <unistd.h>
#include <errno.h>
#include <sys/wait.h>
#include <signal.h>
#include <sys/msg.h> 

int main(int argc,char ** argv) {

struct structMessage{
    long mtype;
    int numberOfToys;
    char message[128];
};

    pid_t kevin, bandits;
    key_t key;
    int msq;
    struct structMessage data;
    const static struct structMessage reset;


    srand(time(NULL));

    key = ftok(argv[0],1); 
    msq = msgget( key, 0600 | IPC_CREAT ); 
    if ( msq < 0 ) { 
         perror("msgget"); 
         return 1; 
    } 

    kevin = fork();
    bandits = fork();
    if(kevin < 0 || bandits < 0){
        perror("fork");
    }
    else if(kevin > 0 && bandits > 0){//parent
        int status;

        wait( &status );
        wait( &status );
    }else if(kevin == 0 && bandits != 0){ //kevin
        data = reset;
        int status;
        int randToys = rand()%30 + 20;

        data.numberOfToys = randToys;
        data.mtype = getppid();
        status = msgsnd(msq, &data, sizeof(data), 0);
        msgrcv(msq, &data, sizeof(struct structMessage), getppid(), 0);
        printf("%s\n", data.message);

    }else if(bandits == 0 && kevin != 0){ //bandit
        int status;

        msgrcv(msq, &data, sizeof(struct structMessage), getppid(), 0);
        printf("Ilyen sok jatekon csusztam el: %d\n", data.numberOfToys);
        strcpy(data.message, "Csak varj, mig a kezunk koze nem kerulsz!");
        status = msgsnd(msq, &data, sizeof(data), 0);
    }

    return 0;
}