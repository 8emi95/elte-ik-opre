http://www.tankonyvtar.hu/hu/tartalom/tamop412A/2010-0011_szamalap2/lecke11_lap4.html
www.hit.bme.hu/~filp/ParhProgr/PP-J-07.DOC
http://irh.inf.unideb.hu/~vargai/download/hardverprog2/HKP2_jegyzet.pdf
https://www.cs.rutgers.edu/~pxk/416/notes/c-tutorials/pipe.html


amikor fork-olunk, akkor az elõtte lévõ változókkal rendelkeik a parent meg a child is


pipe --> ez is kommunikációt szolgál, mint a szignálok... adatokat tudunk átküldeni


létrehozunk egy kételemû pipefd tömböt
és egy sz tömböt, amelyekkel küldünk és fogadunk a két oldalon

write-tal tudunk beleírni
read-del tudunk kiolvasni!


nevesített pipe-ok:

mkfifo() -val létrehoz egy fájlt, visszaad egy id-t

open() megnyitja
close() lezárja
read() olvasás
write() írás
unlink() törli a fájlt

ugyanazt csinálja mint a névtelen pipe... megnyitja a csovet, beleír, kiolvas
oldjuk meg, hogy szöveg helyett valamilyen structot írjon be majd olvasson ki ( pl. Struct a { int b; char c[20] }; )

Miért jobb mint a fork?
poll() fv hívása... egy figyelést állítuk be a csõre... több dolgot tudunk figyelni, pl azt, hogy valaki írt-e bele, amíg figyeltük... 
létre kell hozni egy tömböt... fd-ben adjuk vissza a file descriptor-t




osztott memória...


ipcrm -m 229379