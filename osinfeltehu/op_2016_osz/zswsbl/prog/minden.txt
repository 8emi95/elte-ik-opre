Alapok, a C nyelvű fordító használata, szöveg manipulációs függvények készítése.
Fájlkezelés, szöveges, bináris. Állományok, könyvtárak létrehozása, megnyitása, írása, olvasása, zárása rendszerhívásokon keresztül.
Folyamatok létrehozása. Új folyamatot a fork függvénnyel hozhatunk létre. A gyermek folyamat majdnem pontosan azonos a szülő folyamattal – a PID számuk azért különbözik! (A gyerek elérheti a szülő PID-jét). A szülő és gyerek folyamatok egymással párhuzamosan futnak. Az exec függvénycsalád használata.
Szignálok használata. Signal-t küldhet az egyik folyamat a másiknak ill. valamilyen esemény bekövetkezésekor (pl. érvénytelen memória hivatkozás, 0-val osztás stb.) a rendszer küld a folyamatnak. Készíthetünk kezelőfüggvényt, amelyet a rendszer a signal érkezésekor lefuttat (nem minden sinal típus esetén).  Névtelen csővezeték használata (Pipe). A pipe (csővezeték), olyan mint egy sor, amit az egyik végén írunk, azt a másikon kiolvashatjuk. Pozícionálásra nincs lehetőség. A pipe-nak nincs neve, két fájlleíróval azonosítjuk az író és olvasó végét. Mivel a gyermek folyamat örökli a szülő leíróit, egyszerűen használható a szülővel való kommunikációra.
Nevesített csővezeték (FIFO) Egy speciális FIFO típusú file-t hozzunk létre (nevesítés), majd open függvénnyel megnyitva (egyik oldalon írásra, másikon olvasásra) a működése a pipe-hoz hasonló.  Osztott memória használata. Folyamatok által közösen használt memóriaterület adatok megosztására, kommunikációra.  Szemaforok használata. Kölcsönös kizárás megvalósítására használt versenyhelyzet mentes kezelésű változók. Ha a közös erőforrásokat használó folyamatokban a kritikus szakaszokat szemaforokkal védjük meg, nem alakul ki versenyhelyzet.
Üzenetek küldése fogadása. (msg_snd, msg_rcv) Socket használata.
