<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- saved from url=(0070)http://www.cs.cf.ac.uk/Dave/C/node24.html#SECTION002400000000000000000 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>IPC:Interrupts and Signals: &lt;signal.h&gt;</title>
<meta name="description" content="IPC:Interrupts and Signals: &lt;signal.h&gt;">
<meta name="keywords" content="C">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">

<link rel="STYLESHEET" href="http://www.cs.cf.ac.uk/Dave/C/C.css">
</head>
<body>
<!--Table of Child-Links-->
<a name="CHILD_LINKS"><strong>Subsections</strong></a>
<ul>
<li><a name="tex2html1196" href="http://www.cs.cf.ac.uk/Dave/C/node24.html#SECTION002410000000000000000">
Sending Signals -- <tt>kill(), raise()</tt></a>
</li><li><a name="tex2html1197" href="http://www.cs.cf.ac.uk/Dave/C/node24.html#SECTION002420000000000000000">
Signal Handling -- <tt>signal()</tt></a>
</li><li><a name="tex2html1198" href="http://www.cs.cf.ac.uk/Dave/C/node24.html#SECTION002430000000000000000">
<tt>sig_talk.c</tt> -- complete example program</a>
</li><li><a name="tex2html1199" href="http://www.cs.cf.ac.uk/Dave/C/node24.html#SECTION002440000000000000000">
Other signal functions</a>
</li></ul>
<!--End of Table of Child-Links-->
<hr>
<h1><a name="SECTION002400000000000000000">
IPC:Interrupts and Signals: &lt;<tt>signal.h</tt>&gt;</a>
</h1>
<a name="ch:signal">&nbsp;</a>
In this section will look at ways in which two processes can communicate. When
a process terminates abnormally it usually tries to send a signal indicating
what went wrong. C programs (and UNIX) can trap these for diagnostics. Also
user specified communication can take place in this way.
<br>
<p>
Signals are software generated interrupts that are sent to a process when a event happens.
Signals can be synchronously generated by an error in an application, such as <tt>SIGFPE</tt>
and <tt>SIGSEGV</tt>, but most signals are asynchronous. Signals can be posted to a process when
the system detects a software event, such as a user entering an interrupt or stop or a kill
request from another process. Signals can also be come directly from the OS kernel when a
hardware event such as a bus error or an illegal instruction is encountered. The system
defines a set of signals that can be posted to a process. Signal delivery is analogous to
hardware interrupts in that a signal can be blocked from being delivered in the future. Most
signals cause termination of the receiving process if no action is taken by the process in
response to the signal. Some signals stop the receiving process and other signals can be
ignored. Each signal has a default action which is one of the following: 
</p><ul>
<li> The signal is
discarded after being received
</li><li> The process is terminated after the signal is received
</li><li> A
core file is written, then the process is terminated
</li><li> Stop the process after the signal is
received
</li></ul>
<p>
Each signal defined by the system falls into one of five classes:
</p><p></p><ul>
<li> Hardware
conditions
</li><li> Software conditions
</li><li> Input/output notification
</li><li> Process control
</li><li>
Resource control
</li></ul>
<p>
Macros are defined in
<tt>&lt;signal.h&gt;</tt> header file for common signals.
<br>
</p><p>
These include:
</p><p><table cellpadding="3">
<tbody><tr valign="TOP"><td align="LEFT" nowrap="">SIGHUP  1 /* hangup */</td>
<td align="LEFT" nowrap="">SIGINT  2 /* interrupt */</td>
</tr>
<tr valign="TOP"><td align="LEFT" nowrap="">SIGQUIT 3 /* quit */</td>
<td align="LEFT" nowrap="">SIGILL  4  /* illegal instruction */</td>
</tr>
<tr valign="TOP"><td align="LEFT" nowrap="">SIGABRT 6 /* used by abort */</td>
<td align="LEFT" nowrap="">SIGKILL 9 /* hard kill */</td>
</tr>
<tr valign="TOP"><td align="LEFT" nowrap="">SIGALRM 14 /* alarm clock */</td>
<td align="LEFT" nowrap="">&nbsp;</td>
</tr>
<tr valign="TOP"><td align="LEFT" nowrap="">SIGCONT 19  /* continue a stopped process */</td>
<td align="LEFT" nowrap="">&nbsp;</td>
</tr>
<tr valign="TOP"><td align="LEFT" nowrap="">SIGCHLD 20  /* to parent on child stop or exit */</td>
<td align="LEFT" nowrap="">&nbsp;</td>
</tr>
</tbody></table>
</p><p><em>Signals</em> can be numbered from 0 to 31.
</p><p></p><h1><a name="SECTION002410000000000000000">
Sending Signals -- <tt>kill(), raise()</tt></a>
</h1>
<p>
There are two common functions used to send signals
</p><p><tt>int kill(int pid, int signal)</tt> - a system call that send a <tt>signal</tt> to a process,
<tt>pid</tt>. If pid is greater than zero, the signal is sent to the  process whose
process ID is equal to pid. If pid is 0, the signal is sent  to  all  processes, 
except system  processes.
<br>
</p><p><tt>kill()</tt> returns 0 for a successful call, -1 otherwise and sets <tt>errno</tt>
accordingly.
<br>
</p><p><tt>int raise(int sig)</tt> sends the signal sig to the executing program.
<tt>raise()</tt>
 actually  uses <tt>kill()</tt> to send the signal to the executing program:
</p><p></p><pre>          kill(getpid(), sig);
</pre>
<p>
There is also a UNIX command called kill that can be used to send signals from the command
line - see <tt>man</tt> pages.
</p><p><b>NOTE</b>: that unless caught or ignored, the <tt>kill</tt> signal terminates the
process. Therefore protection is built into the system. 
<br>
</p><p>
Only processes with certain access
privileges can be killed off.
<br>
</p><p>
Basic rule: <em>only processes that have the same user
can send/receive messages</em>. 
<br>
</p><p>
The <tt>SIGKILL</tt> signal cannot be caught or ignored
and will always terminate a process.
</p><p>
<br>
</p><p>
For example<tt>kill(getpid(),SIGINT);</tt>  would send the interrupt
signal to the id of the calling process. 
<br>
</p><p>
This would have a similar effect to
<tt>exit()</tt> command. Also <tt>ctrl-c</tt> typed from the command sends a <tt>
SIGINT</tt> to the process currently being.
<br>
</p><p><tt>unsigned int alarm(unsigned int seconds)</tt> -- sends the signal <tt>
SIGALRM</tt> to  the invoking  process  after  seconds seconds.
</p><p></p><h1><a name="SECTION002420000000000000000">
Signal Handling -- <tt>signal()</tt></a>
</h1>
<p>
An application program can specify a function called a signal handler to be invoked when a specific signal
is received. When a signal handler is invoked on receipt of a signal, it is said to catch the signal. A process
can deal with a signal in one of the following ways:
</p><ul>
<li> The process can let the default action happen
</li><li> The process can block the signal (some signals cannot be ignored)
</li><li> the process can catch the signal with a handler.
</li></ul>
Signal handlers usually execute on the current stack of the process. This lets the signal handler return to
the point that execution was interrupted in the process. This can be changed on a per-signal basis so that a
signal handler executes on a special stack. If a process must resume in a different context than the
interrupted one, it must restore the previous context itself
<p>
Receiving signals is straighforward with the function:
</p><p><tt>int (*signal(int sig, void (*func)()))()</tt> -- that is to say the function
<tt>signal()</tt> will call the <tt>func</tt> functions if the process receives a signal
<tt>sig</tt>. Signal returns a pointer to function <tt>func</tt> if successful or it
returns an error to <tt>errno</tt> and -1 otherwise.
</p><p>
<br>
</p><p><tt>func()</tt> can have three values:
</p><p></p><dl>
<dt><strong><tt>SIG_DFL</tt></strong>
</dt><dd>-- a pointer to a system default function <tt>
SID_DFL()</tt>, which will terminate the process upon receipt of <tt>sig</tt>.
</dd><dt><strong><tt>SIG_IGN</tt></strong>
</dt><dd>-- a pointer to system ignore function <tt>SIG_IGN()</tt>
which will disregard the <tt>sig</tt> action (<u>UNLESS</u> it is <tt>
SIGKILL</tt>).
</dd><dt><strong>A function address</strong>
</dt><dd>-- a user specified function.
</dd></dl>
<p><tt>SIG_DFL and SIG_IGN</tt> are defined in <tt>signal.h</tt> (standard
library) header file.
<br>
</p><p>
Thus to ignore a <tt>ctrl-c</tt> command from the   command line. we could
do:
<br>
</p><p>&nbsp;&nbsp;&nbsp;<tt>signal(SIGINT, SIG_IGN);</tt>
<br>
</p><p>
TO reset system so that <tt>SIGINT</tt> causes a   termination at any place
in our program, we would do:
<br>
</p><p>&nbsp;&nbsp;&nbsp;<tt>signal(SIGINT, SIG_DFL);</tt>
 <br>
</p><p>
<br>
</p><p>
So lets write a program to trap a <tt>ctrl-c</tt> but not quit on this signal. We
have a function <tt>sigproc()</tt> that is executed when we trap a <tt>
ctrl-c</tt>. We will also set another function to quit the program if it traps the
<tt>SIGQUIT</tt> signal so we can terminate our program:
<br>
</p><p><tt>
</tt></p><pre><tt><tt>
#include &lt;stdio.h&gt;
&nbsp;
void sigproc(void);
&nbsp;
void quitproc(void); 
&nbsp;
main()
{ signal(SIGINT, sigproc);
		 signal(SIGQUIT, quitproc);
		 printf(``ctrl-c disabled use ctrl-<img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$"><img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$"> to quit<img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$">n'');
		 for(;;); /* infinite loop */}
&nbsp;
void sigproc()
{ 		 signal(SIGINT, sigproc); /*  */
		 /* NOTE some versions of UNIX will reset signal to default
		 after each call. So for portability reset signal each time */
&nbsp;
		 printf(``you have pressed ctrl-c <img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$">n'');
}
&nbsp;
void quitproc()
{ 		 printf(``ctrl-<img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$"><img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$"> pressed to quit<img width="12" height="32" align="MIDDLE" border="0" src="./IPC Interrupts and Signals   signal.h _files/img3.gif" alt="$\backslash$">n'');
		 exit(0); /* normal exit status */
}
</tt></tt></pre><tt>
</tt><p><tt></tt>
 <br>
</p><p></p><h1><a name="SECTION002430000000000000000">
<tt>sig_talk.c</tt> -- complete example program</a>
</h1>
<p>
Let us now write a program that communicates between child and parent
processes using <tt>kill() and signal()</tt>.
<br>
</p><p><tt>fork()</tt> creates the child process from the parent. The <tt>pid</tt> can be
checked to decide whether it is the child (== 0) or the parent (pid = child
process id).
<br>
</p><p>
The parent can then send messages to child using the pid and <tt>kill()</tt>.
<br>
</p><p>
The child picks up these signals with <tt>signal()</tt> and calls appropriate
functions.
 <br>
</p><p>
An example of communicating process using signals is <tt>sig_talk.c</tt>:
</p><p></p><pre>/* sig_talk.c --- Example of how 2 processes can talk */
/* to each other using kill() and signal() */
/* We will fork() 2 process and let the parent send a few */
/* signals to it`s child  */

/* cc sig_talk.c -o sig_talk  */

#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;

void sighup(); /* routines child will call upon sigtrap */
void sigint();
void sigquit();

main()
{ int pid;

  /* get child process */
  
   if ((pid = fork()) &lt; 0) {
        perror("fork");
        exit(1);
    }
    
   if (pid == 0)
     { /* child */
       signal(SIGHUP,sighup); /* set function calls */
       signal(SIGINT,sigint);
       signal(SIGQUIT, sigquit);
       for(;;); /* loop for ever */
     }
  else /* parent */
     {  /* pid hold id of child */
       printf("\nPARENT: sending SIGHUP\n\n");
       kill(pid,SIGHUP);
       sleep(3); /* pause for 3 secs */
       printf("\nPARENT: sending SIGINT\n\n");
       kill(pid,SIGINT);
       sleep(3); /* pause for 3 secs */
       printf("\nPARENT: sending SIGQUIT\n\n");
       kill(pid,SIGQUIT);
       sleep(3);
     }
}

void sighup()

{  signal(SIGHUP,sighup); /* reset signal */
   printf("CHILD: I have received a SIGHUP\n");
}

void sigint()

{  signal(SIGINT,sigint); /* reset signal */
   printf("CHILD: I have received a SIGINT\n");
}

void sigquit()

{ printf("My DADDY has Killed me!!!\n");
  exit(0);
}
</pre>
<p></p><h1><a name="SECTION002440000000000000000">
Other signal functions</a>
</h1>
<p>
There are a few other functions defined in <tt>signal.h</tt>:
</p><p><tt>int sighold(int sig)</tt> -- adds <tt>sig</tt> to the calling process's signal mask
</p><p><tt>int sigrelse(int sig)</tt> -- removes <tt>sig</tt> from  the  calling  process's  signal
     mask
</p><p><tt>int sigignore(int sig)</tt> -- sets the disposition of <tt>sig</tt> to <tt>SIG_IGN</tt>
</p><p><tt>int sigpause(int sig)</tt> -- removes <tt>sig</tt> from  the  calling  process's  signal
     mask  and  suspends  the  calling  process until a signal is
     received
</p><p>
<br></p><hr>
<address>
<i>Dave Marshall</i>
<br><i>1/5/1999</i>
</address>


</body></html>