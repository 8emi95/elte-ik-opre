<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- saved from url=(0070)http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002500000000000000000 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>IPC:Message Queues:&lt;sys/msg.h&gt; </title>
<meta name="description" content="IPC:Message Queues:&lt;sys/msg.h&gt; ">
<meta name="keywords" content="C">
<meta name="resource-type" content="document">
<meta name="distribution" content="global">

<link rel="STYLESHEET" href="http://www.cs.cf.ac.uk/Dave/C/C.css">
</head>
<body>
<!--Table of Child-Links-->
<a name="CHILD_LINKS"><strong>Subsections</strong></a>
<ul>
<li><a name="tex2html1211" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002510000000000000000">
Initialising the Message Queue</a>
</li><li><a name="tex2html1212" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002520000000000000000">
IPC Functions, Key Arguments, and Creation Flags:
&lt;sys/ipc.h&gt;</a>
</li><li><a name="tex2html1213" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002530000000000000000">
Controlling message queues</a>
</li><li><a name="tex2html1214" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002540000000000000000">
Sending and Receiving Messages</a>
</li><li><a name="tex2html1215" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002550000000000000000">
POSIX Messages: &lt;<tt>mqueue.h</tt>&gt; </a>
</li><li><a name="tex2html1216" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002560000000000000000">
Example: Sending messages between two processes</a>
<ul>
<li><a name="tex2html1217" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002561000000000000000">
<tt>message_send.c</tt> -- creating and sending to a simple
message queue</a>
</li><li><a name="tex2html1218" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002562000000000000000">
<tt>message_rec.c</tt> -- receiving the above message</a>
</li></ul>
</li><li><a name="tex2html1219" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002570000000000000000">
Some further example message queue programs</a>
<ul>
<li><a name="tex2html1220" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002571000000000000000">
<tt>msgget.c</tt>: Simple Program to illustrate <tt>msget()</tt></a>
</li><li><a name="tex2html1221" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002572000000000000000">
<tt>msgctl.c</tt>Sample Program to Illustrate <tt>msgctl()</tt></a>
</li><li><a name="tex2html1222" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002573000000000000000">
<tt>msgop.c</tt>: Sample Program to Illustrate <tt>msgsnd()</tt> and
<tt>msgrcv()</tt></a>
</li></ul>
</li><li><a name="tex2html1223" href="http://www.cs.cf.ac.uk/Dave/C/node25.html#SECTION002580000000000000000">
Exercises</a>
</li></ul>
<!--End of Table of Child-Links-->
<hr>
<h1><a name="SECTION002500000000000000000">
IPC:Message Queues:<tt>&lt;sys/msg.h&gt;</tt>  </a>
</h1>
<p>
The basic idea of a <em>message queue</em> is a simple one.
</p><p>
Two (or more) processes can exchange information via access to a common
system message queue. The <em>sending</em>  process places via some (OS)
message-passing module a message onto a queue which can be read by
another process (Figure&nbsp;<a href="http://www.cs.cf.ac.uk/Dave/C/node25.html#fig:message">24.1</a>). Each message is given an
identification or <tt>type</tt> so that processes can select the appropriate
message. Process must share a common <tt>key</tt> in order to gain access to
the queue in the first place (subject to other permissions -- see below).
</p><p><a name="fig:message">&nbsp;</a><img src="./IPC Message Queues  sys msg.h _files/message.gif">
</p><p>
<b>Fig.&nbsp;<a href="http://www.cs.cf.ac.uk/Dave/C/node25.html#fig:message">24.1</a> Basic Message Passing</b>
IPC messaging lets processes send and receive messages, and
queue messages for processing in an arbitrary order. Unlike the file
byte-stream data flow of pipes, each IPC message has an explicit length.
Messages can be assigned a specific type. Because of this, a server
process can direct message traffic between clients on its queue by using
the client process PID as the message type. For single-message
transactions, multiple server processes can work in parallel on
transactions sent to a shared message queue.
</p><p>
Before a process can send or receive a message, the queue must be
initialized (through the <tt>msgget</tt> function see below)
Operations to send and receive messages are performed by the <tt>
msgsnd()</tt> and <tt>msgrcv()</tt> functions, respectively.
</p><p>
When a message is sent, its text is copied to
the message queue. The <tt>msgsnd()</tt> and <tt>msgrcv()</tt> functions can be
performed as either blocking or non-blocking operations. Non-blocking
operations allow for asynchronous message transfer -- the process is not
suspended as a result of sending or receiving a message.  In blocking or
synchronous message passing the sending process cannot continue until the
message has been transferred or has even been acknowledged by a receiver.
IPC signal and other mechanisms  can be employed to implement such
transfer. A blocked message operation remains suspended until one of the
following three conditions occurs:
</p><p></p><ul>
<li> The call succeeds.
</li><li> The process receives a signal.
</li><li> The queue is removed. 
</li></ul><h1><a name="SECTION002510000000000000000">
Initialising the Message Queue</a>
</h1>
<p>
The <tt>msgget()</tt> function
initializes a new message queue:
</p><p></p><pre>int msgget(key_t key, int msgflg)
</pre>
<p>
It can also return the message queue ID
(<tt>msqid</tt>) of the queue corresponding to the key argument. The value passed
as the <tt>msgflg</tt> argument must be an octal integer with settings for
the queue's permissions and control flags.
</p><p>
The following code illustrates the <tt>msgget()</tt> function.
</p><pre>#include &lt;sys/ipc.h&gt;; 
#include &lt;sys/msg.h&gt;; 

... 


key_t key; /* key to be passed to msgget() */ 
int msgflg /* msgflg to be passed to msgget() */ 
int msqid; /* return value from msgget() */ 

...
key = ...
msgflg = ...

if ((msqid = msgget(key, msgflg)) == &amp;ndash;1)
  {
    perror("msgget: msgget failed");
    exit(1);
   } else
    (void) fprintf(stderr, &amp;ldquo;msgget succeeded");
...
</pre>
<p></p><h1><a name="SECTION002520000000000000000">
IPC Functions, Key Arguments, and Creation Flags:
&lt;sys/ipc.h&gt;</a>
</h1>
<p>
Processes requesting access to an IPC facility must be able to identify
it. To do this, functions that initialize or provide access to an IPC
facility use a <tt>key_t key</tt> argument.  (<tt>key_t</tt> is essentially an
<tt>int</tt> type defined in &lt;sys/types.h&gt;
</p><p>
The <tt>key</tt> is an arbitrary
value or one that can be derived from a common seed at run time.  
One way
is with <tt>ftok()</tt> , which converts a filename to a key value
that is unique within the system. Functions that initialize or get access
to messages (also semaphores  or shared memory see later) return an ID
number of type int. IPC functions that perform read, write, and control
operations use this ID. If the key argument is specified as <tt>
IPC_PRIVATE</tt>, the call initializes a new instance of an IPC facility
that is private to the creating process. When the <tt>IPC_CREAT</tt> flag
is supplied in the flags argument appropriate to the call, the function
tries to create the facility if it does not exist already. When called
with both the <tt>IPC_CREAT</tt> and <tt>IPC_EXCL</tt> flags, the function
fails if the facility already exists. This can be useful when more than
one process might attempt to initialize the facility. One such case might
involve several server processes having access to the same facility. If
they all attempt to create the facility with <tt>IPC_EXCL</tt> in effect,
only the first attempt succeeds. If neither of these flags is given and
the facility already exists, the functions to get access simply return
the ID of the facility. If <tt>IPC_CREAT</tt> is omitted and the facility
is not already initialized, the calls fail. These control flags are
combined, using logical (bitwise) OR, with the octal permission modes to
form the flags argument. For example, the statement below initializes a
new message queue if the queue does not exist.
</p><p></p><pre>msqid = msgget(ftok("/tmp",
key), (IPC_CREAT | IPC_EXCL | 0400));
</pre>
<p>
The first argument
evaluates to a <tt>key</tt> based on the string ("/tmp"). The
second argument evaluates to the
combined permissions and control flags.
</p><p></p><h1><a name="SECTION002530000000000000000">
Controlling message queues</a>
</h1>
<p>
The <tt>msgctl()</tt> function alters the permissions and other
characteristics of a message queue. The owner or creator of a
queue can change its ownership or permissions using <tt>msgctl()</tt>
Also, any
process with permission to do so can use <tt>msgctl()</tt> for control
operations.
</p><p>
The <tt>msgctl()</tt> function is prototypes as follows:
</p><p></p><pre>int msgctl(int msqid, int cmd, struct msqid_ds *buf )
</pre>
<p>
The <tt>msqid</tt> argument must be the ID of
an existing message queue. The <tt>cmd argument</tt> is one of:
</p><p></p><dl>
<dt><strong><tt>IPC_STAT</tt></strong>
</dt><dd>--
Place information about the status of the queue in the data structure
pointed to by <tt>buf</tt>. The process must have read permission for this
call to succeed. 
</dd><dt><strong><tt>IPC_SET</tt></strong>
</dt><dd>-- Set the owner's user and group ID, the
permissions, and the size (in number of bytes) of the message queue. A
process must have the effective user ID of the owner, creator, or
superuser for this call to succeed. 
</dd><dt><strong><tt>IPC_RMID</tt></strong>
</dt><dd>-- Remove the message queue
specified by the <tt>msqid</tt> argument. 
</dd></dl>
<p>
The following code illustrates the
<tt>msgctl()</tt> function with all its various flags:
</p><p></p><pre>#include&lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt; 
#include &lt;sys/msg.h&gt;
...
if (msgctl(msqid, IPC_STAT, &amp;buf) == -1) {
perror("msgctl: msgctl failed");
exit(1);
}
...
if (msgctl(msqid, IPC_SET, &amp;buf) == -1) {
perror("msgctl: msgctl failed");
exit(1);
}
...
</pre>
<p></p><h1><a name="SECTION002540000000000000000">
Sending and Receiving Messages</a>
</h1>
<p>
The <tt>msgsnd()</tt> and <tt>msgrcv()</tt> functions send and receive messages,
respectively:
</p><p></p><pre>int msgsnd(int msqid, const void *msgp, size_t msgsz,
          int msgflg);

int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,
          int msgflg);
</pre>
<p>
The <tt>msqid</tt> argument <b>must</b> be the ID of an existing message
queue. The <tt>msgp</tt> argument is a pointer to a structure that contains
the type of the message and its text.  The structure below is an
     example of what this user-defined buffer might look like:
</p><p></p><pre> struct mymsg {
      long      mtype;    /* message type */
      char mtext[MSGSZ]; /* message text of length MSGSZ */
}
</pre>
<p>
The <tt>msgsz</tt> argument specifies
the length of the message in bytes.
</p><p>
The structure member <tt>msgtype</tt> is the received message's type as
     specified by the sending process.
</p><p>
The argument <tt>msgflg</tt> specifies the action to be taken if  one
     or more of the following are true:
</p><ul>
<li> The number of bytes already  on  the  queue  is  equal  to
      <tt>msg_qbytes</tt>.
</li><li> The total number of messages on all queues system-wide  is
       equal to the system-imposed limit.
</li></ul>
     These actions are as follows:
<ul>
<li> If (<tt>msgflg &amp; IPC_NOWAIT</tt>) is non-zero, the message 
will  not
       be sent and the calling process will return immediately.
</li><li> If (<tt>msgflg &amp; IPC_NOWAIT</tt>) is  0,  the  calling  process 
will suspend execution until one of the following occurs:
<ul>
<li> The condition responsible for the suspension no  longer
          exists, in which case the message is sent.
</li><li> The message queue identifier <tt>msqid</tt> is removed from  the
          system; when this occurs, <tt>errno</tt> is set
          equal to <tt>EIDRM</tt> and -1 is returned.
</li><li> The calling process receives a signal  that  is  to  be
          caught;  in  this  case the message is not sent and the
          calling  process  resumes  execution.
</li></ul>
<p>
Upon successful completion, the following actions are  taken
     with  respect  to  the  data structure associated with <tt>msqid</tt>:
</p><ul>
<li> <tt>msg_qnum</tt> is incremented by 1.
</li><li> <tt>msg_lspid</tt> is set equal to the process ID  of  the 
calling
       process.
</li><li> <tt>msg_stime</tt> is set equal to the current time.
</li></ul></li></ul>
<p>
The following code illustrates <tt>
msgsnd()</tt> and <tt>msgrcv()</tt>:
</p><p></p><pre>#include &lt;sys/types.h&gt; 
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;

...

int msgflg; /* message flags for the operation */
struct msgbuf *msgp; /* pointer to the message buffer */
int msgsz; /* message size */
long msgtyp; /* desired message type */
int msqid /* message queue ID to be used */

...

msgp = (struct msgbuf *)malloc((unsigned)(sizeof(struct msgbuf)
- sizeof msgp-&gt;mtext + maxmsgsz));

if (msgp == NULL) {
(void) fprintf(stderr, "msgop: %s %d byte messages.\n",
"could not allocate message buffer for", maxmsgsz);
exit(1);

...

msgsz = ...
msgflg = ...

if (msgsnd(msqid, msgp, msgsz, msgflg) == -1)
perror("msgop: msgsnd failed");
...
msgsz = ...
msgtyp = first_on_queue;
msgflg = ...
if (rtrn = msgrcv(msqid, msgp, msgsz, msgtyp, msgflg) == -1)
perror("msgop: msgrcv failed");
...
</pre>
<p></p><h1><a name="SECTION002550000000000000000">
POSIX Messages: &lt;<tt>mqueue.h</tt>&gt; </a>
</h1>
<p>
The POSIX message queue functions are:
</p><p><tt>mq_open()</tt> -- Connects to, and optionally creates, a named message
queue.
</p><p><tt>mq_close()</tt> --  Ends the connection to an open message queue.
</p><p><tt>mq_unlink()</tt> --  Ends the connection to an open message queue and
causes the queue to be removed when the last process closes it.
</p><p><tt>mq_send()</tt> --  Places a message in the queue.
</p><p><tt>mq_receive()</tt> --  Receives (removes) the oldest, highest priority
message from the queue.
</p><p><tt>mq_notify()</tt> --  Notifies a process or thread that a message is
available in the queue.
</p><p><tt>mq_setattr()</tt> -- Set or get message queue
attributes.
</p><p>
The basic operation of these functions is as described above. For
full function prototypes and further information see the UNIX <tt>man
pages</tt>
</p><p></p><h1><a name="SECTION002560000000000000000">
Example: Sending messages between two processes</a>
</h1>
<p>
The following two programs should be compiled and run <em>at the same
time</em> to illustrate basic principle of message passing:
</p><p></p><dl>
<dt><strong><tt>message_send.c</tt></strong>
</dt><dd>-- Creates a message queue and sends one
message to the queue.
</dd><dt><strong><tt>message_rec.c</tt></strong>
</dt><dd>-- Reads the message from the queue.
</dd></dl><h2><a name="SECTION002561000000000000000">
<tt>message_send.c</tt> -- creating and sending to a simple
message queue</a>
</h2>
<p>
The full code listing for <tt>message_send.c</tt> is as follows:
</p><p></p><pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define MSGSZ     128


/*
 * Declare the message structure.
 */

typedef struct msgbuf {
         long    mtype;
         char    mtext[MSGSZ];
         } message_buf;

main()
{
    int msqid;
    int msgflg = IPC_CREAT | 0666;
    key_t key;
    message_buf sbuf;
    size_t buf_length;

    /*
     * Get the message queue id for the
     * "name" 1234, which was created by
     * the server.
     */
    key = 1234;

(void) fprintf(stderr, "\nmsgget: Calling msgget(%#lx,\
%#o)\n",
key, msgflg);

    if ((msqid = msgget(key, msgflg )) &lt; 0) {
        perror("msgget");
        exit(1);
    }
    else 
     (void) fprintf(stderr,"msgget: msgget succeeded: msqid = %d\n", msqid);


    /*
     * We'll send message type 1
     */
     
    sbuf.mtype = 1;
    
    (void) fprintf(stderr,"msgget: msgget succeeded: msqid = %d\n", msqid);
    
    (void) strcpy(sbuf.mtext, "Did you get this?");
    
    (void) fprintf(stderr,"msgget: msgget succeeded: msqid = %d\n", msqid);
    
    buf_length = strlen(sbuf.mtext) + 1 ;
    
    

    /*
     * Send a message.
     */
    if (msgsnd(msqid, &amp;sbuf, buf_length, IPC_NOWAIT) &lt; 0) {
       printf ("%d, %d, %s, %d\n", msqid, sbuf.mtype, sbuf.mtext, buf_length);
        perror("msgsnd");
        exit(1);
    }

   else 
      printf("Message: \"%s\" Sent\n", sbuf.mtext);
      
    exit(0);
}
</pre>
<p>
The essential points to note here are:
</p><p></p><ul>
<li> The Message queue is created with a basic <tt>key</tt> and message
flag <tt>msgflg = IPC_CREAT | 0666</tt> -- create queue and make it read
and appendable by all.
</li><li> A  message of type (<tt>sbuf.mtype</tt>) 1 is sent to the queue with
the message ``<tt>Did you get this?</tt>''
</li></ul><h2><a name="SECTION002562000000000000000">
<tt>message_rec.c</tt> -- receiving the above message</a>
</h2>
<p>
The full code listing for <tt>message_send.c</tt>'s companion process, <tt>
message_rec.c</tt> is as follows:
</p><p></p><pre>#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;stdio.h&gt;

#define MSGSZ     128


/*
 * Declare the message structure.
 */

typedef struct msgbuf {
    long    mtype;
    char    mtext[MSGSZ];
} message_buf;


main()
{
    int msqid;
    key_t key;
    message_buf  rbuf;

    /*
     * Get the message queue id for the
     * "name" 1234, which was created by
     * the server.
     */
    key = 1234;

    if ((msqid = msgget(key, 0666)) &lt; 0) {
        perror("msgget");
        exit(1);
    }

    
    /*
     * Receive an answer of message type 1.
     */
    if (msgrcv(msqid, &amp;rbuf, MSGSZ, 1, 0) &lt; 0) {
        perror("msgrcv");
        exit(1);
    }

    /*
     * Print the answer.
     */
    printf("%s\n", rbuf.mtext);
    exit(0);
}
</pre>
<p>
The essential points to note here are:
</p><p></p><ul>
<li> The Message queue is opened with  <tt>msgget</tt> (message
flag <tt>0666</tt>) and the <em>same</em> <tt>key</tt> as <tt>message_send.c</tt>.
</li><li> A  message  of the <em>same </em> type  1 is received from
the queue with the message ``<tt>Did you get this?</tt>'' stored in <tt>
rbuf.mtext</tt>.
<p></p></li></ul><h1><a name="SECTION002570000000000000000">
Some further example message queue programs</a>
</h1>
<p>
The following suite of programs can be used to investigate interactively
a variety of massage passing ideas (see exercises below).
</p><p>
The message queue <b>must</b> be initialised with the <tt>msgget.c</tt>
program. The effects of controlling the queue and sending and receiving
messages can be investigated with <tt>msgctl.c</tt> and <tt>msgop.c</tt>
respectively.
</p><p></p><h2><a name="SECTION002571000000000000000">
<tt>msgget.c</tt>: Simple Program to illustrate <tt>msget()</tt></a>
</h2>
<p></p><pre>/*
 * msgget.c: Illustrate the msgget() function.
 * This is a simple exerciser of the msgget() function. It prompts
 * for the arguments, makes the call, and reports the results.
 */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;

extern void  exit();
extern void  perror();

main()
{
 key_t  key;  /* key to be passed to msgget() */
 int  msgflg,  /* msgflg to be passed to msgget() */
   msqid;  /* return value from msgget() */

 (void) fprintf(stderr,
  "All numeric input is expected to follow C conventions:\n");
 (void) fprintf(stderr,
  "\t0x... is interpreted as hexadecimal,\n");
 (void) fprintf(stderr, "\t0... is interpreted as octal,\n");
 (void) fprintf(stderr, "\totherwise, decimal.\n");
 (void) fprintf(stderr, "IPC_PRIVATE == %#lx\n", IPC_PRIVATE);
 (void) fprintf(stderr, "Enter key: ");
 (void) scanf("%li", &amp;key);
 (void) fprintf(stderr, "\nExpected flags for msgflg argument
are:\n");
 (void) fprintf(stderr, "\tIPC_EXCL =\t%#8.8o\n", IPC_EXCL);
 (void) fprintf(stderr, "\tIPC_CREAT =\t%#8.8o\n", IPC_CREAT);
 (void) fprintf(stderr, "\towner read =\t%#8.8o\n", 0400);
 (void) fprintf(stderr, "\towner write =\t%#8.8o\n", 0200);
 (void) fprintf(stderr, "\tgroup read =\t%#8.8o\n", 040);
 (void) fprintf(stderr, "\tgroup write =\t%#8.8o\n", 020);
 (void) fprintf(stderr, "\tother read =\t%#8.8o\n", 04);
 (void) fprintf(stderr, "\tother write =\t%#8.8o\n", 02);
 (void) fprintf(stderr, "Enter msgflg value: ");
 (void) scanf("%i", &amp;msgflg);

 (void) fprintf(stderr, "\nmsgget: Calling msgget(%#lx,
%#o)\n",
 key, msgflg);
 if ((msqid = msgget(key, msgflg)) == -1)
 {
  perror("msgget: msgget failed");
  exit(1);
 } else {
  (void) fprintf(stderr,
   "msgget: msgget succeeded: msqid = %d\n", msqid);
  exit(0);
 }
}
</pre>
<p></p><h2><a name="SECTION002572000000000000000">
<tt>msgctl.c</tt>Sample Program to Illustrate <tt>msgctl()</tt></a>
</h2>
<p></p><pre>/*
 * msgctl.c:  Illustrate the msgctl() function.
 *
 * This is a simple exerciser of the msgctl() function.  It allows
 * you to perform one control operation on one message queue.  It
 * gives up immediately if any control operation fails, so be
careful
 * not to set permissions to preclude read permission; you won't
be
 * able to reset the permissions with this code if you do.
 */
#include   &lt;stdio.h&gt;
#include   &lt;sys/types.h&gt;
#include   &lt;sys/ipc.h&gt;
#include   &lt;sys/msg.h&gt;
#include   &lt;time.h&gt;

static void do_msgctl();
extern void exit();
extern void perror();
static char warning_message[] = "If you remove read permission
for \
     yourself, this program will fail frequently!";

main()
{
 struct msqid_ds buf;     /* queue descriptor buffer for IPC_STAT
          and IP_SET commands */
 int    cmd,  /* command to be given to msgctl() */
     msqid;  /* queue ID to be given to msgctl() */

 (void fprintf(stderr,
  "All numeric input is expected to follow C conventions:\n");
 (void) fprintf(stderr,
  "\t0x... is interpreted as hexadecimal,\n");
 (void) fprintf(stderr, "\t0... is interpreted as octal,\n");
 (void) fprintf(stderr, "\totherwise, decimal.\n");

 /* Get the msqid and cmd arguments for the msgctl() call. */
 (void) fprintf(stderr,
  "Please enter arguments for msgctls() as requested.");
 (void) fprintf(stderr, "\nEnter the msqid: ");
 (void) scanf("%i", &amp;msqid);
 (void) fprintf(stderr, "\tIPC_RMID = %d\n", IPC_RMID);
 (void) fprintf(stderr, "\tIPC_SET = %d\n", IPC_SET);
 (void) fprintf(stderr, "\tIPC_STAT = %d\n", IPC_STAT);
 (void) fprintf(stderr, "\nEnter the value for the command: ");
 (void) scanf("%i", &amp;cmd);

 switch (cmd) {
  case IPC_SET:
   /* Modify settings in the message queue control structure.
*/
   (void) fprintf(stderr, "Before IPC_SET, get current
values:");
   /* fall through to IPC_STAT processing */
  case IPC_STAT:
   /* Get a copy of the current message queue control
    * structure and show it to the user. */
   do_msgctl(msqid, IPC_STAT, &amp;buf);
   (void) fprintf(stderr, ]
   "msg_perm.uid = %d\n", buf.msg_perm.uid);
   (void) fprintf(stderr,
   "msg_perm.gid = %d\n", buf.msg_perm.gid);
   (void) fprintf(stderr,
   "msg_perm.cuid = %d\n", buf.msg_perm.cuid);
   (void) fprintf(stderr,
   "msg_perm.cgid = %d\n", buf.msg_perm.cgid);
   (void) fprintf(stderr, "msg_perm.mode = %#o, ",
   buf.msg_perm.mode);
   (void) fprintf(stderr, "access permissions = %#o\n",
   buf.msg_perm.mode &amp; 0777);
   (void) fprintf(stderr, "msg_cbytes = %d\n",
       buf.msg_cbytes);
   (void) fprintf(stderr, "msg_qbytes = %d\n",
       buf.msg_qbytes);
   (void) fprintf(stderr, "msg_qnum = %d\n", buf.msg_qnum);
   (void) fprintf(stderr, "msg_lspid = %d\n",
       buf.msg_lspid);
   (void) fprintf(stderr, "msg_lrpid = %d\n",
       buf.msg_lrpid);
   (void) fprintf(stderr, "msg_stime = %s", buf.msg_stime ?
   ctime(&amp;buf.msg_stime) : "Not Set\n");
   (void) fprintf(stderr, "msg_rtime = %s", buf.msg_rtime ?
   ctime(&amp;buf.msg_rtime) : "Not Set\n");
   (void) fprintf(stderr, "msg_ctime = %s",
       ctime(&amp;buf.msg_ctime));
   if (cmd == IPC_STAT)
    break;
   /*  Now continue with IPC_SET. */
   (void) fprintf(stderr, "Enter msg_perm.uid: ");
   (void) scanf ("%hi", &amp;buf.msg_perm.uid);
   (void) fprintf(stderr, "Enter msg_perm.gid: ");
   (void) scanf("%hi", &amp;buf.msg_perm.gid);
   (void) fprintf(stderr, "%s\n", warning_message);
   (void) fprintf(stderr, "Enter msg_perm.mode: ");
   (void) scanf("%hi", &amp;buf.msg_perm.mode);
   (void) fprintf(stderr, "Enter msg_qbytes: ");
   (void) scanf("%hi", &amp;buf.msg_qbytes);
   do_msgctl(msqid, IPC_SET, &amp;buf);
   break;
  case IPC_RMID:
  default:
   /* Remove the message queue or try an unknown command. */
   do_msgctl(msqid, cmd, (struct msqid_ds *)NULL);
   break;
 }
 exit(0);
}

/*
 * Print indication of arguments being passed to msgctl(), call
 * msgctl(), and report the results. If msgctl() fails, do not
 * return; this example doesn't deal with errors, it just reports
 * them.
 */
static void
do_msgctl(msqid, cmd, buf)
struct msqid_ds    *buf;  /* pointer to queue descriptor buffer */
int    cmd,  /* command code */
    msqid;  /* queue ID */
{
 register int rtrn;  /* hold area for return value from msgctl()
*/

 (void) fprintf(stderr, "\nmsgctl: Calling msgctl(%d, %d,
%s)\n",
   msqid, cmd, buf ? "&amp;buf" : "(struct msqid_ds *)NULL");
 rtrn = msgctl(msqid, cmd, buf);
 if (rtrn == -1) {
  perror("msgctl: msgctl failed");
  exit(1);
 } else {
  (void) fprintf(stderr, "msgctl: msgctl returned %d\n",
      rtrn);
 }
}
</pre>
<p></p><h2><a name="SECTION002573000000000000000">
<tt>msgop.c</tt>: Sample Program to Illustrate <tt>msgsnd()</tt> and
<tt>msgrcv()</tt></a>
</h2>
<p></p><pre>/*
 * msgop.c: Illustrate the msgsnd() and msgrcv() functions.
 *
 * This is a simple exerciser of the message send and receive
 * routines. It allows the user to attempt to send and receive as
many
 * messages as wanted to or from one message queue.
 */

#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/ipc.h&gt;
#include &lt;sys/msg.h&gt;

static int ask();
extern void exit();
extern char *malloc();
extern void perror();

char first_on_queue[] = "-&gt; first message on queue",
 full_buf[] = "Message buffer overflow. Extra message text\
      discarded.";

main()
{
 register int    c;  /* message text input */
 int    choice; /* user's selected operation code */
 register int    i;  /* loop control for mtext */
 int    msgflg; /* message flags for the operation */
 struct msgbuf     *msgp;  /* pointer to the message buffer */
 int    msgsz;  /* message size */
 long    msgtyp;  /* desired message type */
 int    msqid,  /* message queue ID to be used */
     maxmsgsz, /* size of allocated message buffer */
     rtrn;  /* return value from msgrcv or msgsnd */
 (void) fprintf(stderr,
  "All numeric input is expected to follow C conventions:\n");
 (void) fprintf(stderr,
  "\t0x... is interpreted as hexadecimal,\n");
 (void) fprintf(stderr, "\t0... is interpreted as octal,\n");
 (void) fprintf(stderr, "\totherwise, decimal.\n");
 /* Get the message queue ID and set up the message buffer. */
 (void) fprintf(stderr, "Enter msqid: ");
 (void) scanf("%i", &amp;msqid);
 /*
  * Note that &lt;sys/msg.h&gt; includes a definition of struct
msgbuf
  * with the mtext field defined as:
  *   char mtext[1];
  * therefore, this definition is only a template, not a
structure
  * definition that you can use directly, unless you want only
to
  * send and receive messages of 0 or 1 byte. To handle this,
  * malloc an area big enough to contain the template - the size
  * of the mtext template field + the size of the mtext field
  * wanted. Then you can use the pointer returned by malloc as a
  * struct msgbuf with an mtext field of the size you want. Note
  * also that sizeof msgp-&gt;mtext is valid even though msgp
isn't
  * pointing to anything yet. Sizeof doesn't dereference msgp,
but
  * uses its type to figure out what you are asking about.
  */
 (void) fprintf(stderr,
  "Enter the message buffer size you want:");
 (void) scanf("%i", &amp;maxmsgsz);
 if (maxmsgsz &lt; 0) {
  (void) fprintf(stderr, "msgop: %s\n",
    "The message buffer size must be &gt;= 0.");
  exit(1);
 }
 msgp = (struct msgbuf *)malloc((unsigned)(sizeof(struct
msgbuf)
    - sizeof msgp-&gt;mtext + maxmsgsz));
 if (msgp == NULL) {
  (void) fprintf(stderr, "msgop: %s %d byte messages.\n",
    "could not allocate message buffer for", maxmsgsz);
  exit(1);
 }
 /* Loop through message operations until the user is ready to
  quit. */
 while (choice = ask()) {
  switch (choice) {
  case 1: /* msgsnd() requested: Get the arguments, make the
    call, and report the results. */
   (void) fprintf(stderr, "Valid msgsnd message %s\n",
    "types are positive integers.");
   (void) fprintf(stderr, "Enter msgp-&gt;mtype: ");
   (void) scanf("%li", &amp;msgp-&gt;mtype);
   if (maxmsgsz) {
    /* Since you've been using scanf, you need the loop
       below to throw away the rest of the input on the
       line after the entered mtype before you start
       reading the mtext. */
    while ((c = getchar()) != '\n' &amp;&amp; c != EOF);
    (void) fprintf(stderr, "Enter a %s:\n",
        "one line message");
    for (i = 0; ((c = getchar()) != '\n'); i++) {
     if (i &gt;= maxmsgsz) {
      (void) fprintf(stderr, "\n%s\n", full_buf);
      while ((c = getchar()) != '\n');
      break;
     }
     msgp-&gt;mtext[i] = c;
    }
    msgsz = i;
   } else
    msgsz = 0;
   (void) fprintf(stderr,"\nMeaningful msgsnd flag is:\n");
   (void) fprintf(stderr, "\tIPC_NOWAIT =\t%#8.8o\n",
    IPC_NOWAIT);
   (void) fprintf(stderr, "Enter msgflg: ");
   (void) scanf("%i", &amp;msgflg);
   (void) fprintf(stderr, "%s(%d, msgp, %d, %#o)\n",
    "msgop: Calling msgsnd", msqid, msgsz, msgflg);
   (void) fprintf(stderr, "msgp-&gt;mtype = %ld\n",
       msgp-&gt;mtype);
   (void) fprintf(stderr, "msgp-&gt;mtext = \"");
   for (i = 0; i &lt; msgsz; i++)
    (void) fputc(msgp-&gt;mtext[i], stderr);
    (void) fprintf(stderr, "\"\n");
    rtrn = msgsnd(msqid, msgp, msgsz, msgflg);
    if (rtrn == -1)
     perror("msgop: msgsnd failed");
    else
     (void) fprintf(stderr,
        "msgop: msgsnd returned %d\n", rtrn);
    break;
  case 2: /* msgrcv() requested: Get the arguments, make the
       call, and report the results. */
   for (msgsz = -1; msgsz &lt; 0 || msgsz &gt; maxmsgsz;
      (void) scanf("%i", &amp;msgsz))
    (void) fprintf(stderr, "%s (0 &lt;= msgsz &lt;= %d): ",
        "Enter msgsz", maxmsgsz);
   (void) fprintf(stderr, "msgtyp meanings:\n");
   (void) fprintf(stderr, "\t 0 %s\n", first_on_queue);
   (void) fprintf(stderr, "\t&gt;0 %s of given type\n",
    first_on_queue);
   (void) fprintf(stderr, "\t&lt;0 %s with type &lt;= |msgtyp|\n",
       first_on_queue);
   (void) fprintf(stderr, "Enter msgtyp: ");
   (void) scanf("%li", &amp;msgtyp);
   (void) fprintf(stderr,
       "Meaningful msgrcv flags are:\n");
   (void) fprintf(stderr, "\tMSG_NOERROR =\t%#8.8o\n",
       MSG_NOERROR);
   (void) fprintf(stderr, "\tIPC_NOWAIT =\t%#8.8o\n",
       IPC_NOWAIT);
   (void) fprintf(stderr, "Enter msgflg: ");
   (void) scanf("%i", &amp;msgflg);
   (void) fprintf(stderr, "%s(%d, msgp, %d, %ld, %#o);\n",
       "msgop: Calling msgrcv", msqid, msgsz,
       msgtyp, msgflg);
   rtrn = msgrcv(msqid, msgp, msgsz, msgtyp, msgflg);
   if (rtrn == -1)
    perror("msgop: msgrcv failed");
   else {
    (void) fprintf(stderr, "msgop: %s %d\n",
        "msgrcv returned", rtrn);
    (void) fprintf(stderr, "msgp-&gt;mtype = %ld\n",
        msgp-&gt;mtype);
    (void) fprintf(stderr, "msgp-&gt;mtext is: \"");
    for (i = 0; i &lt; rtrn; i++)
     (void) fputc(msgp-&gt;mtext[i], stderr);
    (void) fprintf(stderr, "\"\n");
   }
   break;
  default:
   (void) fprintf(stderr, "msgop: operation unknown\n");
   break;
  }
 }
 exit(0);
}

/*
 * Ask the user what to do next. Return the user's choice code.
 * Don't return until the user selects a valid choice.
 */
static
ask()
{
 int response; /* User's response. */

 do {
  (void) fprintf(stderr, "Your options are:\n");
  (void) fprintf(stderr, "\tExit =\t0 or Control-D\n");
  (void) fprintf(stderr, "\tmsgsnd =\t1\n");
  (void) fprintf(stderr, "\tmsgrcv =\t2\n");
  (void) fprintf(stderr, "Enter your choice: ");

  /* Preset response so "^D" will be interpreted as exit. */
  response = 0;
  (void) scanf("%i", &amp;response);
 } while (response &lt; 0 || response &gt; 2);

 return(response);
}
</pre>
<p></p><h1><a name="SECTION002580000000000000000">
Exercises</a>
</h1>
<p>
<b>Exercise 12755</b></p>
<p>
Write a 2 programs that will both send and messages and construct the
following dialog between them
</p><p></p><ul>
<li> (Process 1) Sends the message "Are you hearing me?"
</li><li> (Process 2) Receives the message and replies "Loud and Clear".
</li><li> (Process 1) Receives the reply and then says "I can hear you too".
</li></ul><p></p>
<p></p><p>
<b>Exercise 12756</b></p>
<p>
Compile the programs <tt>msgget.c</tt>, <tt>msgctl.c</tt> and <tt>msgop.c</tt> and
then
</p><ul>
<li> investigate and understand fully the operations of the flags
(access, creation <em>etc.</em> permissions) you can set interactively in the
programs.
</li><li> Use the programs to:
<ul>
<li> Send and receive messages of two different message <tt>type</tt>s.
</li><li> Place several messages on the queue and inquire about the state of
the queue with <tt>msgctl.c</tt>. Add/delete a few messages (using
<tt>msgop.c</tt> and perform the inquiry once more.
</li><li> Use <tt>msgctl.c</tt> to alter a message on the queue.
</li><li> Use <tt>msgctl.c</tt> to delete a message from the queue.
</li></ul></li></ul><p></p>
<p></p><p>
<b>Exercise 12757</b></p>
<p>
Write a <em>server</em> program and two <em>client</em> programs so that the
<em>server</em> can communicate privately to <em>each client</em> individually
via a <em>single</em> message queue.</p>
<p></p><p>
<b>Exercise 12758</b></p>
<p>
Implement a <em>blocked</em> or <em>synchronous</em> method of message passing
using signal interrupts.</p>
<p>
<br></p><hr>
<address>
<i>Dave Marshall</i>
<br><i>1/5/1999</i>
</address>


</body></html>